#!/bin/sh

# This script is created to coordinate osmud with the federated_coordinator in order to filter the devices
# that can participate to the learning phase

# This script takes three arguments
# The first represent the ip_address of the federated_coordinator
# The second the user of that machine
# The third represent the message that you need to process (the message contain the IP of the IoT device)

# REMEMBER TO GENERATE THE KEYS ON THE ROUTER
# Generation private key
# dropbearkey -t rsa -f ~/.ssh/id_rsa
# 
# Generation Public key for openssh
# dropbearkey -y -f ~/.ssh/id_rsa | grep "^ssh-rsa " > ~/.ssh/id_rsa.pub
# 
# Copy the pub key on the remote_host
# cat ~/.ssh/id_rsa.pub | ssh <user>@<ip_address> "cat >> ~/.ssh/authorized_keys"
#
# Connection without password: you need to specify the key location
# ssh <user>@<ip_address> -i ~/.ssh/id_rsa


if [ $# -eq 0 ]
then
	echo "Missing options!"
        echo "(run $0 -h for help)"
        echo ""
        exit 0
fi


REMOTE_USER=""
MESSAGE=""
REMOTE_PATH=""
while getopts "hu:p:m:" OPTION; do
        case $OPTION in
		
		u)
                        REMOTE_USER=$OPTARG
                        ;;
                p)
       			REMOTE_PATH=$OPTARG
       			;;         	
                m)
                        MESSAGE=$OPTARG
                        ;;
                h)
                        echo " The remote script executed is a python script, called file_upgrader.py
                        Pay attention: To work this script need a secure connection without password between the device that call the script (tipically osmud) and the device coordinator. Furthermore the coordinator's ip address must be registred as www.mfs.example.com in the file /etc/hosts"
                        echo "Usage:"
                        echo "ip_federated.sh -h "
                        echo "ip_federated.sh -c <ip_address> -p <script_path> -u <user> -m <message>"
                        echo ""
                        echo "	 -u	coordinator user"
                     	echo "	 -p	script's path on the coordinator device (this is not so secure for now, because an attacker can execute another script on the other side)"
                        echo "	 -m	message generated by dnsmasq to be processed"
                        echo "   -h     help"
                        exit 0
                        ;;

        esac
done



COMMAND=$(echo $MESSAGE | awk -F "|" '{ print $2}')
MUD_URL=$(echo $MESSAGE | awk -F "|" '{ print $7}')
IP_TO_VALIDATE=$(echo $MESSAGE | awk -F "|" '{ print $10}')

if test "$IP_TO_VALIDATE" != "-"
then
	ssh $REMOTE_USER@www.mfs.example.com "cd $REMOTE_PATH/; python file_upgrader.py -c $COMMAND -i $IP_TO_VALIDATE"
fi
